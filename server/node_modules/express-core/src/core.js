const ROOT = `${__dirname}/../`;
const moduleName = 'expressCore.core';

const _ = require('lodash');

const $path = require('path');
const $express = require('express');
const $log = require($path.resolve(ROOT, 'src/libs/log'));

class Core {
  constructor (config, app) {
    const configValid = [
      _.has(config, 'handlersPath'),
      _.has(config, 'middlewaresPath'),
      _.has(config, 'handlers'),
      _.has(config, 'middlewares')
    ];

    if (configValid.includes(false)) {
      throw new Error(`[${moduleName}] invalid config for constructor: ${JSON.stringify(config)}`);
    }

    // на случай, если мы хотим работать уже с готовым приложением
    if (!app) {
      this.app = $express(); 
    } else {
      this.app = app;
    }

    if (_.get(config, 'middlewares.length', 0) > 0) {
      Object.assign(this, _.pick(config, [
        'middlewaresPath', 'middlewares'
      ]));

      this.initMiddlewares();
    }

    if (_.has(config, 'httpLog') === true) {
      this.initLogger();
    }

    if (_.get(config, 'handlers.length', 0) > 0) {
      Object.assign(this, _.pick(config, [
        'handlersPath', 'handlers'
      ]));

      this.initHandlers();
    }
  }

  initHandlers () {
    const handlers = this.handlers.reduce((r, name) => {
      const pathOfHandler = $path.resolve(this.handlersPath, name);
      const handler = require(pathOfHandler);

      $log.debug('[%s] loaded handler %s', moduleName, name);

      r.push({handler, name});

      return r;
    }, []);

    for (let handler of handlers) {
      if (_.get(handler.handler, 'independent')) {
        $log.debug('[%s] init independent handler %s', moduleName, handler.name);
        handler.handler.independent(this.app);
      } else if (![
        _.has(handler.handler, 'path'),
        _.has(handler.handler, 'method'),
        _.has(handler.handler, 'handler'),
      ].includes(false)) {
        $log.debug('[%s] init handler(%s) %s %s', moduleName, handler.name, String(handler.handler.method).toUpperCase(), handler.handler.path);
        this.app[String(handler.handler.method).toLowerCase()](handler.handler.path, handler.handler.handler);
      } else {
        throw new Error(`[${moduleName}] init invalid handler`, handler);
      }
    }
  }

  initMiddlewares () {
    const middlewares = this.middlewares.reduce((r, name) => {
      const pathOfMiddleware = $path.resolve(this.middlewaresPath, name);
      const middleware = require(pathOfMiddleware);

      $log.debug('[%s] loaded middleware %s', moduleName, name);

      r.push({middleware, name});

      return r;
    }, []);

    for (let middleware of middlewares) {
      $log.debug('[%s] init middleware %s', moduleName, middleware.name);
      middleware.middleware.middleware(this.app);
    }
  }

  initLogger () {
    this.app.use((req, res, next) => {
      $log.info('%s %s \nCookies: %s \nHeaders: %s \nBody: %s \n%s',
                String(req.method).toUpperCase(), 
                req.path, JSON.stringify(req.cookies || {}), 
                JSON.stringify(req.headers || {}),
                JSON.stringify(req.body || {}),
                '---------------------------'
               );

      next();
    });
  }
  
}

module.exports = Core;